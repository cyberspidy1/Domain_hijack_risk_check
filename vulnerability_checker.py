import dns.resolver
import requests
import re

class VulnerabilityChecker:
    def __init__(self, domain, subdomains):
        self.domain = domain
        self.subdomains = subdomains
    
    def check_vulnerabilities(self):
        results = {}
        for subdomain in self.subdomains:
            print(f"Checking vulnerabilities for {subdomain}...")
            dns_status = self.check_dns(subdomain)
            http_status = self.check_http(subdomain)
            hijacking_risk = self.check_hijacking(subdomain, dns_status, http_status)
            
            results[subdomain] = {
                "dns_status": dns_status,
                "http_status": http_status,
                "subdomain_hijacking": hijacking_risk,
                "cloud_resource_check": self.check_cloud_resources(subdomain),
                "wildcard_check": self.check_wildcard(subdomain),
                "cname_orphan_check": self.check_orphan_cname(subdomain),
            }
        return results
    
    def check_dns(self, subdomain):
        # Check if DNS resolves properly
        try:
            dns.resolver.resolve(subdomain)
            return "Valid"
        except dns.resolver.NXDOMAIN:
            return "Unresolved"
        except dns.resolver.NoAnswer:
            return "No Answer"
        except Exception:
            return "DNS Error"
    
    def check_http(self, subdomain):
        # Check HTTP response of the subdomain
        try:
            response = requests.get(f"http://{subdomain}", timeout=5)
            return response.status_code
        except requests.ConnectionError:
            return "No Response"
        except requests.Timeout:
            return "Timeout"
        except Exception as e:
            return str(e)
    
    def check_hijacking(self, subdomain, dns_status, http_status):
        # Check for potential subdomain hijacking
        if dns_status == "Valid" and http_status == "No Response":
            return "Potential Hijacking"
        if dns_status == "Unresolved":
            return "Unresolved (Danger of Hijacking)"
        return "Safe"

    def check_cloud_resources(self, subdomain):
        # Check for orphaned cloud resources (e.g., AWS S3, Azure, Heroku)
        if "s3.amazonaws.com" in subdomain:
            return self.check_s3_bucket(subdomain)
        elif "herokuapp.com" in subdomain:
            return self.check_heroku(subdomain)
        elif "github.io" in subdomain:
            return self.check_github_pages(subdomain)
        else:
            return "No Cloud Resources Found"
    
    def check_s3_bucket(self, subdomain):
        # Check for orphaned S3 buckets
        try:
            response = requests.get(f"http://{subdomain}.s3.amazonaws.com")
            if response.status_code == 404:
                return "Potential Orphaned S3 Bucket"
            return "S3 Bucket Found"
        except requests.RequestException:
            return "S3 Bucket Not Reachable"
    
    def check_heroku(self, subdomain):
        # Check for orphaned Heroku apps
        try:
            response = requests.get(f"http://{subdomain}")
            if "no such app" in response.text.lower():
                return "Orphaned Heroku App"
            return "Heroku App Found"
        except requests.RequestException:
            return "Heroku App Not Reachable"
    
    def check_github_pages(self, subdomain):
        # Check for unclaimed GitHub Pages subdomains
        try:
            response = requests.get(f"http://{subdomain}")
            if "404" in response.text:
                return "Orphaned GitHub Pages"
            return "GitHub Pages Found"
        except requests.RequestException:
            return "GitHub Pages Not Reachable"
    
    def check_wildcard(self, subdomain):
        # Check if subdomain is a wildcard record (e.g., *.example.com)
        if "*." in subdomain:
            return "Wildcard Record Detected"
        return "No Wildcard Record"
    
    def check_orphan_cname(self, subdomain):
        # Check for orphaned CNAME records (dangling DNS entries)
        try:
            answers = dns.resolver.resolve(subdomain, 'CNAME')
            cname = [rdata.to_text() for rdata in answers][0]
            if not cname:
                return "No CNAME"
            return self.check_cname_target(cname)
        except dns.resolver.NoAnswer:
            return "No CNAME"
        except dns.resolver.NXDOMAIN:
            return "No CNAME (NXDOMAIN)"
        except Exception:
            return "CNAME Lookup Error"
    
    def check_cname_target(self, cname):
        # Check the target of the CNAME to detect potential hijacking
        if "herokuapp.com" in cname or "s3.amazonaws.com" in cname:
            return "Potential Orphaned CNAME Target"
        return "CNAME Target is Safe"

    def check_third_party_services(self, subdomain):
        # Check expired or abandoned third-party services (e.g., Shopify, Netlify)
        if "shopify" in subdomain:
            return self.check_shopify(subdomain)
        if "netlify" in subdomain:
            return self.check_netlify(subdomain)
        return "No Third-Party Service Found"

    def check_shopify(self, subdomain):
        # Check if Shopify subdomain is orphaned
        try:
            response = requests.get(f"http://{subdomain}")
            if "Sorry, this shop is currently unavailable" in response.text:
                return "Orphaned Shopify Store"
            return "Shopify Store Found"
        except requests.RequestException:
            return "Shopify Not Reachable"
    
    def check_netlify(self, subdomain):
        # Check if Netlify subdomain is orphaned
        try:
            response = requests.get(f"http://{subdomain}")
            if "Page Not Found" in response.text:
                return "Orphaned Netlify Subdomain"
            return "Netlify Subdomain Found"
        except requests.RequestException:
            return "Netlify Not Reachable"

